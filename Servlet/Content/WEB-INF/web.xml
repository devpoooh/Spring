<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
  <display-name>Servlet</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
  <servlet>
  	<servlet-name>hello</servlet-name> <!-- 3. 이름을 찾는다. -->
  	<servlet-class>com.hello.HelloServlet</servlet-class> <!-- 4. 객체 생성과 실행 -->
  </servlet>
  <servlet-mapping>
  	<servlet-name>hello</servlet-name> <!-- 2. 등록된 이름 -->
  	<url-pattern>/hello.do</url-pattern> <!-- 1. url요청전송 -->
  </servlet-mapping>
  
  <!-- 
  	Q.도대체 누가 서블릿 객체를 생성했으면 메소드를 호출했을까?
  	A. 서블릿 컨테이너
  	
  	* 동작 순서
  	[1] WEB-INF/web.xml 파일을 로딩하여 구동한다.
  	[2] 브라우저로부터 /hello.do 요청을 받는다.
  	[3] 매핑된 클래스(com.hello.HelloServlet)를 찾아 객체를 생성하고 doGet()메소드를 호출한다.
  	[4] 실행결과를 클라이언트 브라우저로 전송한다.
  	
  	- 컨테이너는 클라이언트의 요청이 들어오는 순간 xml 설정 파일을 참조해 객체를 생성하고 객체의 생명주기를 관리한다. -> spring도 비슷함
   -->
</web-app>

